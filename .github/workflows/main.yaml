name: CI/CD
on:
  push:
    branches: 
      - main
    tags:
      - 'v[0-9].**'
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - targetPlatform: WebGL
            channel: html
            package: build/WebGL/WebGL
            platform: ubuntu-latest
          - targetPlatform: StandaloneLinux64
            channel: linux
            package: build/StandaloneLinux64
            platform: ubuntu-latest
          - targetPlatform: StandaloneWindows64
            channel: windows
            package: build/StandaloneWindows64
            platform: windows-2019
          - targetPlatform: StandaloneOSX
            channel: mac
            package: build/StandaloneOSX
            platform: macos-latest
    defaults:
      run:
        shell: bash
    name: Build ${{ matrix.targetPlatform }}
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Write tag name
        run: echo ${{ steps.tag.outputs.result }}

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Cache unity library folder
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform}}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-${{ matrix.targetPlatform}}-
            Library-

      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      - name: Upload full build as artifact
        uses: actions/upload-artifact@v2
        with:
          name: FullBuild-${{ matrix.targetPlatform }}
          path: build

      - name: Upload build to itch.io (linux)
        if: matrix.platform == 'ubuntu-latest'
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        run: |
          curl "https://raw.githubusercontent.com/AnotherFoxGuy/ci-scripts/main/install-butler.sh" | sudo bash
          butler push --ignore StandaloneLinux64_BackUpThisFolder_ButDontShipItWithYourGame --ignore StandaloneLinux64_BurstDebugInformation_DoNotShip ${{ matrix.package }} lopossum-sognante/test-mattia-non-toccare:${{ matrix.channel }} --userversion ${{ steps.get_version.outputs.VERSION }}

      - name: Upload build to itch.io (windows)
        if: matrix.platform == 'windows-2019'
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        run: |
          choco install butler -y
          butler push --ignore StandaloneWindows64_BackUpThisFolder_ButDontShipItWithYourGame --ignore StandaloneWindows64_BurstDebugInformation_DoNotShip ${{ matrix.package }} lopossum-sognante/test-mattia-non-toccare:${{ matrix.channel }} --userversion ${{ steps.get_version.outputs.VERSION }}
        shell: cmd

      - name: Upload build to itch.io (macos)
        if: matrix.platform == 'macos-latest'
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        run: |
          curl -JOL https://broth.itch.ovh/butler/darwin-amd64/LATEST/archive/default
          unzip butler-darwin-amd64.zip
          ./butler push --ignore StandaloneOSX_BackUpThisFolder_ButDontShipItWithYourGame ${{ matrix.package }} lopossum-sognante/test-mattia-non-toccare:${{ matrix.channel }} --userversion ${{ steps.get_version.outputs.VERSION }}